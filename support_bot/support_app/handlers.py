from telebot import types
from support_app.models import Client, Ticket, Specialist
from .bot import bot, user_state, STATE_WAITING_FOR_NAME, STATE_WAITING_FOR_PHONE
from dotenv import load_dotenv
import os
import logging
import pandas as pd
from io import BytesIO
from .models import AHORequest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)
load_dotenv()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
STATE_CREATING_TICKET = "creating_ticket"
STATE_WAITING_FOR_ANYDESK = "waiting_for_anydesk"
SUPPORT_CHAT_ID = os.getenv('SUPPORT_CHAT_ID')
SUPPORT_AHO_CHAT_ID = os.getenv('SUPPORT_AHO_CHAT_ID')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def get_department_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    it_button = types.KeyboardButton("–ò–¢")
    aho_button = types.KeyboardButton("–ê–•–û")
    markup.add(it_button, aho_button)
    return markup

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
def get_specialist_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    waiting_tickets_button = types.KeyboardButton("üìÇ –ó–∞—è–≤–∫–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏")
    in_progress_tickets_button = types.KeyboardButton("üîß –ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ")
    user_list_button = types.KeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    report_button = types.KeyboardButton("üìä –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü")
    markup.add(waiting_tickets_button, in_progress_tickets_button)
    markup.add(user_list_button, report_button)
    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –ò–¢ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
def get_it_menu_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    ticket_button = types.KeyboardButton("üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
    status_button = types.KeyboardButton("üìä –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏")
    my_tickets_button = types.KeyboardButton("üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏")
    contacts_button = types.KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
    back_button = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    markup.add(ticket_button, status_button)
    markup.add(my_tickets_button, contacts_button)
    markup.add(back_button)
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥"
@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
def go_back_to_main_menu(message):
    user_id = message.chat.id

    if user_id in ticket_info:
        del ticket_info[user_id]

    bot.send_message(user_id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –æ—Ç–¥–µ–ª:", reply_markup=get_department_keyboard())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")





@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    user = Client.objects.filter(telegram_id=user_id).first()

    if user:
        specialist = Specialist.objects.filter(client=user).first()

        if specialist:
            bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                             reply_markup=get_specialist_keyboard())
        else:
            bot.send_message(user_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –æ—Ç–¥–µ–ª:",
                             reply_markup=get_department_keyboard())
    else:
        user_state[user_id] = STATE_WAITING_FOR_NAME
        bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û).")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –§–ò–û
@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == STATE_WAITING_FOR_NAME)
def get_name(message):
    user_id = message.chat.id
    full_name = message.text
    user_state[user_id] = {'full_name': full_name, 'state': STATE_WAITING_FOR_PHONE}
    bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏.",
                     reply_markup=request_phone_keyboard())

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def request_phone_keyboard():
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    button_phone = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    markup.add(button_phone)
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@bot.message_handler(content_types=['contact'])
def contact(message):
    user_id = message.chat.id
    user_info = user_state.get(user_id, None)
    if user_info and user_info.get('state') == STATE_WAITING_FOR_PHONE:
        full_name = user_info.get('full_name')
        telegram_id = message.contact.user_id
        phone_number = message.contact.phone_number
        name_parts = full_name.split()
        first_name = name_parts[0]
        last_name = " ".join(name_parts[1:]) if len(name_parts) > 1 else ""
        user, created = Client.objects.get_or_create(
            telegram_id=telegram_id,
            defaults={'first_name': first_name, 'last_name': last_name, 'username': message.from_user.username, 'phone_number': phone_number}
        )
        user.phone_number = phone_number
        user.save()
        del user_state[user_id]
        bot.send_message(user_id, f"–°–ø–∞—Å–∏–±–æ, {full_name}, –≤–∞—à –Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –æ—Ç–¥–µ–ª:",
                         reply_markup=get_department_keyboard())
    else:
        bot.send_message(user_id, "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–¢"
@bot.message_handler(func=lambda message: message.text == "–ò–¢")
def it_menu(message):
    user_id = message.chat.id
    bot.send_message(user_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ç–¥–µ–ª –ò–¢. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∏–∂–µ:", reply_markup=get_it_menu_keyboard())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –ê–•–û —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
def get_aho_menu_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    submit_request_button = types.KeyboardButton("üìÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É (Excel)")
    back_button = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    markup.add(submit_request_button)
    markup.add(back_button)
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ê–•–û"
@bot.message_handler(func=lambda message: message.text == "–ê–•–û")
def show_aho_menu(message):
    bot.send_message(message.chat.id, "–í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –ê–•–û. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ –≤–∏–¥–µ Excel —Ñ–∞–π–ª–∞.", reply_markup=get_aho_menu_keyboard())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –ê–•–û.")


# ============================================== –õ–û–ì–ò–ö–ê –ó–ê–Ø–í–ö–ò ==============================================
ticket_info = {}

STATE_DESCRIPTION = "description"
STATE_ANYDESK = "anydesk"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"
@bot.message_handler(func=lambda message: message.text == "üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
def create_ticket_request(message):
    user_id = message.chat.id
    user = Client.objects.filter(telegram_id=user_id).first()

    if user:
        ticket_info[user_id] = {'description': None, 'photo': None, 'anydesk_id': None}
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º.",
                         reply_markup=get_back_button())
        bot.register_next_step_handler(message, handle_ticket_description)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏.")
    else:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ (—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ñ–æ—Ç–æ)
def handle_ticket_description(message):
    user_id = message.chat.id
    if user_id not in ticket_info or message.text == "üîô –ù–∞–∑–∞–¥":
        go_back_to_department_menu(message)
        return

    if message.content_type == 'text':
        ticket_info[user_id]['description'] = message.text
    elif message.content_type == 'photo':
        ticket_text = message.caption if message.caption else "–§–æ—Ç–æ –∑–∞—è–≤–∫–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"
        photo_id = message.photo[-1].file_id
        ticket_info[user_id]['description'] = ticket_text
        ticket_info[user_id]['photo'] = photo_id

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID AnyDesk –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).",
                     reply_markup=get_back_button())
    bot.register_next_step_handler(message, handle_anydesk_id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É ID AnyDesk.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID AnyDesk
def handle_anydesk_id(message):
    user_id = message.chat.id
    if message.text == "üîô –ù–∞–∑–∞–¥":
        go_back_to_department_menu(message)
        return

    if not message.text.isdigit():
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à ID AnyDesk, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.",
                         reply_markup=get_back_button())
        bot.register_next_step_handler(message, handle_anydesk_id)
        return

    anydesk_id = message.text
    ticket_info[user_id]['anydesk_id'] = anydesk_id
    user = Client.objects.filter(telegram_id=user_id).first()

    ticket = Ticket.objects.create(client=user, text=ticket_info[user_id]['description'], anydesk_id=anydesk_id)

    if ticket_info[user_id]['photo']:
        file_info = bot.get_file(ticket_info[user_id]['photo'])
        downloaded_file = bot.download_file(file_info.file_path)

        directory = 'tickets'
        if not os.path.exists(directory):
            os.makedirs(directory)

        file_path = f'{directory}/ticket_{ticket.id}.jpg'
        with open(file_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        ticket.file = file_path
        ticket.save()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏–∫—Ä–µ–ø–∏–ª —Ñ–æ—Ç–æ –∫ –∑–∞—è–≤–∫–µ #{ticket.id}.")

    del ticket_info[user_id]

    bot.send_message(user_id, f"–ó–∞—è–≤–∫–∞ #{ticket.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                     reply_markup=get_it_menu_keyboard())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É #{ticket.id}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")

    send_ticket_to_support_chat(ticket)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥"
@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
def go_back_to_department_menu(message):
    user_id = message.chat.id

    if user_id in ticket_info:
        del ticket_info[user_id]

    bot.send_message(user_id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –æ—Ç–¥–µ–ª:",
                     reply_markup=get_department_keyboard())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥"
def get_back_button():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    back_button = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    markup.add(back_button)
    return markup


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏
def send_ticket_to_support_chat(ticket):
    support_chat_id = SUPPORT_CHAT_ID

    markup = types.InlineKeyboardMarkup()
    accept_button = types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É", callback_data=f'accept_{ticket.id}')
    reject_button = types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f'reject_{ticket.id}')
    markup.add(accept_button, reject_button)

    message_text = (
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{ticket.id}\n"
        f"–ö–ª–∏–µ–Ω—Ç: {ticket.client.first_name} {ticket.client.last_name}\n"
        f"–ü—Ä–æ–±–ª–µ–º–∞: {ticket.text}\n"
        f"AnyDesk ID: {ticket.anydesk_id}\n"
        f"–°—Ç–∞—Ç—É—Å: {ticket.status}"
    )

    if ticket.file:
        file_path = ticket.file.path
        with open(file_path, 'rb') as file:
            bot.send_photo(support_chat_id, photo=file, caption=message_text, reply_markup=markup)
        logger.info(f"–ó–∞—è–≤–∫–∞ #{ticket.id} —Å —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    else:
        bot.send_message(support_chat_id, message_text, reply_markup=markup)
        logger.info(f"–ó–∞—è–≤–∫–∞ #{ticket.id} –±–µ–∑ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("accept_") or call.data.startswith("reject_"))
def handle_ticket_action(call):
    ticket_id = int(call.data.split('_')[1])
    user_id = call.from_user.id
    ticket = Ticket.objects.filter(id=ticket_id).first()
    specialist = Specialist.objects.filter(client__telegram_id=user_id).first()

    if not ticket:
        bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if not specialist:
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.")
        return

    if call.data.startswith("accept_"):
        ticket.status = "–í —Ä–∞–±–æ—Ç–µ"
        ticket.specialist = specialist
        ticket.save()

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f"–ó–∞—è–≤–∫–∞ #{ticket.id} –ø—Ä–∏–Ω—è—Ç–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º: {specialist.client.first_name}. –°—Ç–∞—Ç—É—Å: –í —Ä–∞–±–æ—Ç–µ.", reply_markup=None)

        bot.send_message(ticket.client.telegram_id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{ticket.id} –ø—Ä–∏–Ω—è—Ç–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º {specialist.client.first_name}. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")

        markup = types.InlineKeyboardMarkup()
        chat_button = types.InlineKeyboardButton("üí¨ –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç", url=f"tg://user?id={ticket.client.telegram_id}")
        complete_button = types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f'complete_{ticket.id}')
        markup.add(chat_button, complete_button)

        bot.send_message(call.message.chat.id, f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º {ticket.client.first_name} {ticket.client.last_name} –ø–æ –∑–∞—è–≤–∫–µ #{ticket.id}.",
                         reply_markup=markup)
        logger.info(f"–ó–∞—è–≤–∫–∞ #{ticket.id} –ø—Ä–∏–Ω—è—Ç–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º {specialist.client.first_name}. –°–æ–∑–¥–∞–Ω –ø–µ—Ä–µ—Ö–æ–¥ –≤ —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º.")

    elif call.data.startswith("reject_"):
        ticket.status = "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        ticket.save()

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f"–ó–∞—è–≤–∫–∞ #{ticket.id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º: {specialist.client.first_name}.", reply_markup=None)

        bot.send_message(ticket.client.telegram_id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{ticket.id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        logger.info(f"–ó–∞—è–≤–∫–∞ #{ticket.id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º {specialist.client.first_name}.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("complete_"))
def complete_ticket(call):
    ticket_id = int(call.data.split('_')[1])
    user_id = call.from_user.id
    ticket = Ticket.objects.filter(id=ticket_id).first()

    if not ticket:
        bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if ticket.specialist and ticket.specialist.client.telegram_id == user_id:
        ticket.status = "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
        ticket.save()

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f"–ó–∞—è–≤–∫–∞ #{ticket.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º {ticket.specialist.client.first_name}.", reply_markup=None)
        bot.send_message(ticket.client.telegram_id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{ticket.id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–µ–π —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        logger.info(f"–ó–∞—è–≤–∫–∞ #{ticket.id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º {ticket.specialist.client.first_name}.")
    else:
        bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É.")

# ============================================== –õ–û–ì–ò–ö–ê –ö–ù–û–ü–û–ö ==============================================

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìä –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏"
@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏")
def check_ticket_status(message):
    user_id = message.chat.id
    user = Client.objects.filter(telegram_id=user_id).first()
    if not user:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    last_ticket = Ticket.objects.filter(client=user).order_by('-created_at').first()
    if not last_ticket:
        bot.send_message(user_id, "üòî –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫. –ù–∞–∂–º–∏—Ç–µ 'üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É', —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é.")
    else:
        status_emoji = {
            '–û–∂–∏–¥–∞–µ—Ç': 'üïì',
            '–í —Ä–∞–±–æ—Ç–µ': 'üîß',
            '–í—ã–ø–æ–ª–Ω–µ–Ω–æ': '‚úÖ',
            '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ': '‚ùå'
        }
        status_message = (
            f"üìä **–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞—è–≤–∫–∏ #{last_ticket.id}**\n\n"
            f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {last_ticket.text}\n"
            f"üíº **–°—Ç–∞—Ç—É—Å:** {status_emoji.get(last_ticket.status, '')} {last_ticket.status}\n"
            f"üìÖ **–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {last_ticket.created_at.strftime('%d-%m-%Y %H:%M')}"
        )
        bot.send_message(user_id, status_message, parse_mode='Markdown')
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞—è–≤–∫–∏.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏"
@bot.message_handler(func=lambda message: message.text == "üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏")
def show_my_tickets(message):
    user_id = message.chat.id
    user = Client.objects.filter(telegram_id=user_id).first()
    if not user:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    tickets = Ticket.objects.filter(client=user).order_by('-created_at')
    if not tickets:
        bot.send_message(user_id, "üòî –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫. –ù–∞–∂–º–∏—Ç–µ 'üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É', —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é.")
    else:
        ticket_list = ""
        status_emoji = {
            '–û–∂–∏–¥–∞–µ—Ç': 'üïì',
            '–í —Ä–∞–±–æ—Ç–µ': 'üîß',
            '–í—ã–ø–æ–ª–Ω–µ–Ω–æ': '‚úÖ',
            '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ': '‚ùå'
        }
        for ticket in tickets:
            ticket_list += (
                f"üîπ **–ó–∞—è–≤–∫–∞ #{ticket.id}**\n"
                f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {ticket.text[:30]}...\n"
                f"üíº **–°—Ç–∞—Ç—É—Å:** {status_emoji.get(ticket.status, '')} {ticket.status}\n"
                f"üìÖ **–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {ticket.created_at.strftime('%d-%m-%Y %H:%M')}\n\n"
            )

        bot.send_message(user_id, f"üìÇ **–í–∞—à–∏ –∑–∞—è–≤–∫–∏:**\n\n{ticket_list}", parse_mode='Markdown')
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –∑–∞—è–≤–æ–∫.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"
@bot.message_handler(func=lambda message: message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
def show_contacts(message):
    user_id = message.chat.id
    user = Client.objects.filter(telegram_id=user_id).first()
    if not user:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        return
    specialists = Specialist.objects.all()
    if not specialists:
        bot.send_message(user_id, "üòî –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.")
    else:
        markup = types.InlineKeyboardMarkup()
        for specialist in specialists:
            button = types.InlineKeyboardButton(
                text=f"{specialist.client.last_name} {specialist.client.first_name}",
                url=f"tg://user?id={specialist.client.telegram_id}")
            markup.add(button)
        bot.send_message(user_id, "üë®‚Äçüíª **–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è —Å–≤—è–∑–∏:**", reply_markup=markup, parse_mode='Markdown')
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.")


@bot.callback_query_handler(func=lambda call: call.data.startswith("contact_specialist_"))
def contact_specialist(call):
    specialist_id = int(call.data.split('_')[2])
    user_id = call.from_user.id

    specialist = Client.objects.filter(telegram_id=specialist_id).first()
    if not specialist:
        bot.answer_callback_query(call.id, "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    chat_url = f"tg://user?id={specialist.telegram_id}"
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, f"–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —á–∞—Ç —Å {specialist.last_name} {specialist.first_name}.", reply_markup=None)
    bot.send_message(user_id, chat_url, disable_web_page_preview=True)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Å–≤—è–∑—å —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º {specialist.first_name} {specialist.last_name}.")


# ============================================== –õ–û–ì–ò–ö–ê –ê–•–û ==============================================

@bot.message_handler(func=lambda message: message.text == "üìÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É (Excel)")
def request_excel_file(message):
    user_id = message.chat.id
    user = Client.objects.filter(telegram_id=user_id).first()

    if user:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx).")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É 'üìÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É (Excel)'. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞.")
    else:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞
@bot.message_handler(content_types=['document'])
def handle_excel_file(message):
    user_id = message.chat.id
    user = Client.objects.filter(telegram_id=user_id).first()

    if message.document.mime_type == 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        folder_name = 'aho_requests'
        file_name = os.path.join(folder_name, message.document.file_name)

        if not os.path.exists(folder_name):
            os.makedirs(folder_name)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {folder_name}")

        with open(file_name, 'wb') as new_file:
            new_file.write(downloaded_file)

        request = AHORequest.objects.create(client=user, file=file_name)

        send_aho_request_to_support_chat(request)

        bot.send_message(user_id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ê–•–û. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.", reply_markup=get_department_keyboard())
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É –≤ –ê–•–û. –§–∞–π–ª: {file_name}.")
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx).")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–∞–π–ª.")


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –ê–•–û –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏
def send_aho_request_to_support_chat(request):
    support_chat_id = SUPPORT_AHO_CHAT_ID

    message_text = (
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –ê–•–û #{request.id}\n"
        f"–ö–ª–∏–µ–Ω—Ç: {request.client.first_name} {request.client.last_name} (@{request.client.username})\n"
        f"–°—Ç–∞—Ç—É—Å: {request.status}\n"
        f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {request.created_at.strftime('%Y-%m-%d %H:%M')}"
    )

    markup = types.InlineKeyboardMarkup()
    if request.status == '–û–∂–∏–¥–∞–µ—Ç':
        markup.add(types.InlineKeyboardButton("‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f'aho_accept_{request.id}'))
    elif request.status == '–í —Ä–∞–±–æ—Ç–µ':
        markup.add(types.InlineKeyboardButton("üíµ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç", callback_data=f'aho_invoice_{request.id}'))
    elif request.status == '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å—á–µ—Ç':
        markup.add(types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—á–µ–Ω–æ", callback_data=f'aho_paid_{request.id}'))
    elif request.status == '–û–ø–ª–∞—á–µ–Ω–æ':
        markup.add(types.InlineKeyboardButton("üì¶ –í—ã–ø–æ–ª–Ω–µ–Ω–æ (–¥–æ—Å—Ç–∞–≤–ª–µ–Ω)", callback_data=f'aho_completed_{request.id}'))

    if request.file:
        bot.send_document(support_chat_id, document=open(request.file.path, 'rb'), caption=message_text, reply_markup=markup)
        logger.info(f"–ó–∞—è–≤–∫–∞ –ê–•–û #{request.id} —Å —Ñ–∞–π–ª–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ê–•–û.")
    else:
        bot.send_message(support_chat_id, message_text, reply_markup=markup)
        logger.info(f"–ó–∞—è–≤–∫–∞ –ê–•–û #{request.id} –±–µ–∑ —Ñ–∞–π–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ê–•–û.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ –ê–•–û
@bot.callback_query_handler(func=lambda call: call.data.startswith("aho_"))
def handle_aho_status_change(call):
    request_id = int(call.data.split('_')[2])
    request = AHORequest.objects.filter(id=request_id).first()

    if not request:
        bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if call.data.startswith("aho_accept_"):
        request.status = '–í —Ä–∞–±–æ—Ç–µ'
        notification = f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request.id} –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É."
    elif call.data.startswith("aho_invoice_"):
        request.status = '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å—á–µ—Ç'
        notification = f"–ü–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ #{request.id} –±—ã–ª —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å—á–µ—Ç."
    elif call.data.startswith("aho_paid_"):
        request.status = '–û–ø–ª–∞—á–µ–Ω–æ'
        notification = f"–°—á–µ—Ç –ø–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ #{request.id} –±—ã–ª –æ–ø–ª–∞—á–µ–Ω."
    elif call.data.startswith("aho_completed_"):
        request.status = '–í—ã–ø–æ–ª–Ω–µ–Ω–æ (–¥–æ—Å—Ç–∞–≤–ª–µ–Ω)'
        notification = f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request.id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏ —Ç–æ–≤–∞—Ä –¥–æ—Å—Ç–∞–≤–ª–µ–Ω."

    request.save()

    bot.send_message(request.client.telegram_id, notification)

    bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                             caption=(
                                 f"–ó–∞—è–≤–∫–∞ –ê–•–û #{request.id}\n"
                                 f"–ö–ª–∏–µ–Ω—Ç: {request.client.first_name} {request.client.last_name} (@{request.client.username})\n"
                                 f"–°—Ç–∞—Ç—É—Å: {request.status}\n"
                                 f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {request.created_at.strftime('%Y-%m-%d %H:%M')}"
                             ),
                             reply_markup=create_aho_buttons(request))
    logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –ê–•–û #{request.id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{request.status}'.")
    bot.answer_callback_query(call.id, f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{request.status}'.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞—è–≤–∫–∏ –ê–•–û
def create_aho_buttons(request):
    markup = types.InlineKeyboardMarkup()
    if request.status == '–û–∂–∏–¥–∞–µ—Ç':
        markup.add(types.InlineKeyboardButton("‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f'aho_accept_{request.id}'))
    elif request.status == '–í —Ä–∞–±–æ—Ç–µ':
        markup.add(types.InlineKeyboardButton("üíµ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç", callback_data=f'aho_invoice_{request.id}'))
    elif request.status == '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å—á–µ—Ç':
        markup.add(types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—á–µ–Ω–æ", callback_data=f'aho_paid_{request.id}'))
    elif request.status == '–û–ø–ª–∞—á–µ–Ω–æ':
        markup.add(types.InlineKeyboardButton("üì¶ –í—ã–ø–æ–ª–Ω–µ–Ω–æ (–¥–æ—Å—Ç–∞–≤–ª–µ–Ω)", callback_data=f'aho_completed_{request.id}'))
    return markup



# ============================================== –õ–û–ì–ò–ö–ê –ê–î–ú–ò–ù–ê ==============================================

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
@bot.message_handler(func=lambda message: message.text == "üìÇ –ó–∞—è–≤–∫–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏")
def show_waiting_tickets(message):
    user_id = message.chat.id
    specialist = Specialist.objects.filter(client__telegram_id=user_id).first()

    if specialist:
        tickets = Ticket.objects.filter(status="–û–∂–∏–¥–∞–µ—Ç").all()
        if tickets:
            response = "–ó–∞—è–≤–∫–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏:\n\n"
            for ticket in tickets:
                response += f"–ó–∞—è–≤–∫–∞ #{ticket.id}: {ticket.client.first_name} {ticket.client.last_name}\n–ü—Ä–æ–±–ª–µ–º–∞: {ticket.text}\n\n"
            bot.send_message(user_id, response)
        else:
            bot.send_message(user_id, "–ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏.")
    else:
        bot.send_message(user_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ
@bot.message_handler(func=lambda message: message.text == "üîß –ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ")
def show_in_progress_tickets(message):
    user_id = message.chat.id
    specialist = Specialist.objects.filter(client__telegram_id=user_id).first()

    if specialist:
        tickets = Ticket.objects.filter(status="–í —Ä–∞–±–æ—Ç–µ", specialist=specialist).all()
        if tickets:
            response = "–ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ:\n\n"
            for ticket in tickets:
                response += f"–ó–∞—è–≤–∫–∞ #{ticket.id}: {ticket.client.first_name} {ticket.client.last_name}\n–ü—Ä–æ–±–ª–µ–º–∞: {ticket.text}\n\n"
            bot.send_message(user_id, response)
        else:
            bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ.")
    else:
        bot.send_message(user_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@bot.message_handler(func=lambda message: message.text == "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
def show_user_list(message):
    user_id = message.chat.id
    specialist = Specialist.objects.filter(client__telegram_id=user_id).first()

    if specialist:
        users = Client.objects.all()
        response = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users:
            response += f"–ò–º—è: {user.first_name} {user.last_name} (@{user.username})\n–¢–µ–ª–µ–≥—Ä–∞–º ID: {user.telegram_id}\n\n"
        bot.send_message(user_id, response)
    else:
        bot.send_message(user_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –º–µ—Å—è—Ü
@bot.message_handler(func=lambda message: message.text == "üìä –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü")
def request_report_month(message):
    user_id = message.chat.id
    specialist = Specialist.objects.filter(client__telegram_id=user_id).first()

    if specialist:
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MM-YYYY (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09-2024).")
        bot.register_next_step_handler(message, generate_monthly_report)
    else:
        bot.send_message(user_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.")


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel
def generate_monthly_report(message):
    user_id = message.chat.id
    date_input = message.text

    try:
        month, year = map(int, date_input.split('-'))
        start_date = pd.Timestamp(year=year, month=month, day=1)
        end_date = pd.Timestamp(year=year, month=month, day=1) + pd.DateOffset(months=1) - pd.DateOffset(days=1)

        tickets = Ticket.objects.filter(created_at__range=[start_date, end_date])

        if tickets:
            data = []
            for ticket in tickets:
                data.append({
                    'ID –∑–∞—è–≤–∫–∏': ticket.id,
                    '–ö–ª–∏–µ–Ω—Ç': f"{ticket.client.first_name} {ticket.client.last_name}",
                    '–ü—Ä–æ–±–ª–µ–º–∞': ticket.text,
                    '–°—Ç–∞—Ç—É—Å': ticket.status,
                    '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': ticket.created_at.strftime('%Y-%m-%d %H:%M')
                })

            df = pd.DataFrame(data)

            excel_buffer = BytesIO()
            with pd.ExcelWriter(excel_buffer, engine='xlsxwriter') as writer:
                df.to_excel(writer, index=False, sheet_name='–û—Ç—á–µ—Ç')

            excel_buffer.seek(0)
            excel_buffer.name = f"–û—Ç—á–µ—Ç_{date_input}.xlsx"

            bot.send_document(user_id, document=excel_buffer, caption=f"–û—Ç—á–µ—Ç –∑–∞ {date_input}")
            logger.info(f"–û—Ç—á–µ—Ç –∑–∞ {date_input} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.")
        else:
            bot.send_message(user_id, f"–ó–∞ {date_input} –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
    except ValueError:
        bot.send_message(user_id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ MM-YYYY.")
